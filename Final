import tkinter as tk
from tkinter import messagebox
import requests  # To make HTTP requests to the weather API
from datetime import datetime  # For  timestamps
from PIL import Image, ImageTk  # For handling and displaying images

class WeatherApp:
    def __init__(self):
        # Create the main window
        self.window = tk.Tk()
        self.window.title("Weather Now")
        self.window.configure(background="Light Blue")

        # Set dimensions for background images
        self.img_width = 800
        self.img_height = 600

        # Load background images based on weather conditions
        self.load_images()

        # Set a default background
        self.bg_label = tk.Label(self.window, image=self.clear_bg)
        self.bg_label.place(x=0, y=0, relwidth=1, relheight=1)

        # Build the interactive UI
        self.build_interface()

        # Move background behind widgets
        self.bg_label.lower()

        # Run the Tkinter event loop
        self.window.mainloop()

    def load_images(self):
        # Load and resize images for each weather condition
        self.clear_bg = ImageTk.PhotoImage(Image.open("Clear.gif").resize((self.img_width, self.img_height)))
        self.rain_bg = ImageTk.PhotoImage(Image.open("Rain.gif").resize((self.img_width, self.img_height)))
        self.snow_bg = ImageTk.PhotoImage(Image.open("Snowing.gif").resize((self.img_width, self.img_height)))
        self.cloudy_bg = ImageTk.PhotoImage(Image.open("Cloudy.gif").resize((self.img_width, self.img_height)))

    def build_interface(self):
        # Create a frame for API input and results
        self.api_frame = tk.LabelFrame(self.window, text="Live Weather - (Weather Now Map)", padx=10, pady=10)
        self.api_frame.pack(padx=10, pady=10, fill="x")

        # Instruction label
        tk.Label(self.api_frame, text="Enter the city, state, or zip to get weather in your area.").pack(pady=5)

        # Entry widget for city input
        self.city_entry = tk.Entry(self.api_frame, width=30)
        self.city_entry.pack()

        # Checkbox to show 5-day forecast
        self.show_forecast = tk.BooleanVar()
        forecast_checkbox = tk.Checkbutton(self.api_frame, text="Show 5-Day Forecast", variable=self.show_forecast)
        forecast_checkbox.pack(pady=5)

        # Button to trigger weather fetch
        tk.Button(self.api_frame, text="Get Weather", command=self.get_weather).pack()

        # Label to display results
        self.weather_result = tk.Label(self.api_frame, text="", justify="left")
        self.weather_result.pack(pady=10)

        # Optional manual weather input section
        decision_frame = tk.Frame()
        decision_frame.pack(pady=5, padx=5)
        tk.Label(decision_frame, text="Would you like to input the current weather around your location?").pack()

        # Buttons for manual input or skipping
        button_row = tk.Frame(decision_frame)
        button_row.pack(pady=10)
        tk.Button(button_row, text="Yes", command=self.open_manual_input).pack(side="left", padx=10)
        tk.Button(button_row, text="No", command=lambda: messagebox.showinfo("Alright", "Suit yourself!"))

        # Exit button
        tk.Button(self.window, text="Exit", command=self.window.quit).pack(pady=10)

    def open_manual_input(self):
        # Open manual weather feedback form
        ManualInputWindow()

    def get_weather(self):
        city = self.city_entry.get()
        if not city:
            self.weather_result.config(text="Please enter a city.")
            return

        # OpenWeatherMap API setup
        api_key = "4ce30896f4e17f46551f11fab859c03a"
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=imperial"

        try:
            response = requests.get(url)
            data = response.json()

            if data["cod"] != 200:
                self.weather_result.config(text=f"Error: {data['message']}")
                return

            # Extract and format weather data
            description = data["weather"][0]["description"].title()
            temp = data["main"]["temp"]
            feels_like = data["main"]["feels_like"]
            wind = data["wind"]["speed"]
            city_name = data["name"]
            country = data["sys"]["country"]
            sunrise = datetime.fromtimestamp(data["sys"]["sunrise"]).strftime("%H:%M:%S")
            sunset = datetime.fromtimestamp(data["sys"]["sunset"]).strftime("%H:%M:%S")

            # Display weather info
            self.weather_result.config(
                text=f"{city_name}, {country}:\nTemperature: {temp}째F - {description}\n"
                     f"Feels like {feels_like}째F\nWind: {wind} mph\nSunrise: {sunrise} | Sunset: {sunset}"
            )

            # Update background image based on weather
            if "rain" in description.lower():
                self.bg_label.configure(image=self.rain_bg)
                self.bg_label.image = self.rain_bg
            elif "clear" in description.lower():
                self.bg_label.configure(image=self.clear_bg)
                self.bg_label.image = self.clear_bg
            elif "snow" in description.lower():
                self.bg_label.configure(image=self.snow_bg)
                self.bg_label.image = self.snow_bg
            elif "cloud" in description.lower():
                self.bg_label.configure(image=self.cloudy_bg)
                self.bg_label.image = self.cloudy_bg

            # Show 5-day forecast if checkbox is checked
            if self.show_forecast.get():
                self.display_forecast(city)

        except Exception as e:
            self.weather_result.config(text=f"Error: {e}")

    def display_forecast(self, city):
        try:
            # Fetch 5-day forecast
            url = f"https://api.openweathermap.org/data/2.5/forecast?q={city}&appid=4ce30896f4e17f46551f11fab859c03a&units=imperial"
            response = requests.get(url)
            data = response.json()

            if data["cod"] != "200":
                messagebox.showerror("Error", "Could not retrieve forecast data.")
                return

            # Create a new window to show forecast
            forecast_window = tk.Toplevel(self.window)
            forecast_window.title(f"5-Day Forecast for {city}")
            forecast_window.configure(background="white")

            # Parse forecast data (3-hour intervals) and show one entry per day
            days = {}
            for entry in data["list"]:
                dt_txt = entry["dt_txt"]
                date = dt_txt.split()[0]
                if date not in days:
                    desc = entry["weather"][0]["description"].title()
                    temp = entry["main"]["temp"]
                    feels_like = entry["main"]["feels_like"]
                    wind = entry["wind"]["speed"]
                    days[date] = f"{date}: {desc}, Temp: {temp}째F, Feels like: {feels_like}째F, Wind: {wind} mph"

            # Display each day's forecast inside a bordered frame
            for val in days.values():
                frame = tk.Frame(forecast_window, bg="light grey", bd=2, relief="groove", padx=10, pady=5)
                frame.pack(padx=10, pady=5, fill="x")
                tk.Label(frame, text=val, bg="light grey", anchor="w", justify="left").pack()

        except Exception as e:
            messagebox.showerror("Error", f"Failed to load forecast: {e}")


class ManualInputWindow:
    def __init__(self, on_submit=None, weather_types=None):
        self.on_submit = on_submit
        self.weather_types = weather_types or ["Sunny", "Raining", "Cloudy", "Storming", "Snowing"]

        # Create a window for manual input
        self.manual_window = tk.Toplevel()
        self.manual_window.title("Weather Input")
        self.manual_window.configure(background="light blue")

        # Create input frame
        frame = tk.LabelFrame(self.manual_window, text="Manual Weather Input", padx=10, pady=10)
        frame.pack(padx=10, pady=10, fill="x")

        # Radio buttons to choose a weather type
        self.selected_weather = tk.StringVar()
        for weather in self.weather_types:
            tk.Radiobutton(frame, text=weather, variable=self.selected_weather, value=weather).pack(anchor="w")

        # Text box for additional user comments
        self.comment_box = tk.Text(frame, height=4, width=40)
        self.comment_box.pack()
        self.comment_box.insert(tk.END, "Enter your comments here:")

        # Submit button and exit button
        tk.Button(frame, text="Submit", command=self.submit).pack()
        tk.Button(self.manual_window, text="Exit", command=self.manual_window.destroy).pack(pady=5)

    def submit(self):
        weather = self.selected_weather.get()
        comments = self.comment_box.get("1.0", tk.END).strip()

        if not weather or not comments:
            messagebox.showwarning("Missing Info", "Please select a weather type and enter a comment.")
            return

        # Save feedback to a file
        with open("feedback_log.txt", "a") as file:
            file.write(f"Weather: {weather} | Feedback: {comments}\n")

        # Call optional callback function
        if self.on_submit:
            self.on_submit(weather, comments)

        # Confirmation message and close window
        messagebox.showinfo("Thank you!", "Your feedback has been recorded.")
        self.manual_window.destroy()


# Entry point
def main():
    WeatherApp()


if __name__ == "__main__":
    main()
